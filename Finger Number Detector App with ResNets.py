import numpy as npfrom keras import layersfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2Dfrom keras.models import Model, load_modelfrom keras.preprocessing import imagefrom keras.utils import layer_utilsfrom keras.utils.data_utils import get_filefrom keras.applications.imagenet_utils import preprocess_inputimport pydotfrom IPython.display import SVGfrom keras.utils.vis_utils import model_to_dotfrom keras.utils import plot_modelfrom keras.initializers import glorot_uniformimport imageiofrom matplotlib.pyplot import imshowimport keras.backend as KK.set_image_data_format('channels_last')K.set_learning_phase(1)#Imports the Helper Functions like ResNet50() etc. from resnet_functions.py in same directory.from resnets_functions import *"""Finger Number Detector App by using ResNet with Keras."""model = ResNet50(input_shape = (64, 64, 3), classes = 6)model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_dataset()#Normalizes image vectors.X_train = X_train_orig/255.X_test = X_test_orig/255.#Converts training and test labels to one hot matrices.Y_train = convert_to_one_hot(Y_train_orig, 6).TY_test = convert_to_one_hot(Y_test_orig, 6).Tprint ("number of training examples = " + str(X_train.shape[0]))print ("number of test examples = " + str(Y_test.shape[0]))print ("X_train shape: " + str(X_train.shape))print ("Y_train shape: " + str(Y_train.shape))print ("X_test shape: " + str(X_test.shape))print ("Y_test shape: " + str(Y_test.shape))model.fit(X_train, Y_train, epochs = 20, batch_size = 32)model.save('my_model1.h5')preds = model.evaluate(X_test, Y_test)print ("Loss = " + str(preds[0]))print ("Test Accuracy = " + str(preds[1]) + "\n")#Tests an image in the same directory.img_path = 'my1.jpg'img = image.load_img(img_path, target_size=(64, 64))x = image.img_to_array(img)x = np.expand_dims(x, axis=0)x = x/255.0print('Input image shape:', x.shape)my_image = imageio.imread(img_path)imshow(my_image)print("Class Prediction Vector [p(0), p(1), p(2), p(3), p(4), p(5)] = ")print(model.predict(x))print("Estimation is " +str(np.argmax(model.predict(x))))